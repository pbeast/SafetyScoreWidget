{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "pink",
    "glyph" : "car"
  },
  "name" : "Safety Score",
  "script" : "\nasync function request(url, opts) {\n  try {\n    const request = new Request(url);\n\n    request.method = opts.method;\n    request.headers = opts.headers;\n    if (opts.body != undefined) request.body = JSON.stringify(opts.body);\n\n    var result = await request.loadJSON();\n    \/\/ console.log(result);\n    return result;\n  } catch (err) {\n    console.log(err);\n\n    return undefined;\n  }\n}\n\nasync function showErrorMessage(widget, message) {\n  let msg = widget.addText(message);\n\n  msg.textColor = Color.red();\n  msg.centerAlignText();\n  msg.font = Font.heavyMonospacedSystemFont(13);\n\n  if (!config.runsInWidget) {\n    widget.presentSmall();\n  }\n\n  Script.setWidget(widget);\n  Script.complete();\n}\n\nasync function run() {\n  let widget = new ListWidget();\n  widget.backgroundColor = Color.black();\n\n  const fm = FileManager.iCloud();\n\n  const configPath = fm.documentsDirectory() + \"\/safetyScoreConfig.json\";\n  const statePath = fm.documentsDirectory() + \"\/safetyScoreState.json\";\n  if (!fm.fileExists(configPath)) {\n    await showErrorMessage(widget, \"Please run the configurator script first\");\n    return;\n  }\n\n  var state = {};\n  if (fm.fileExists(statePath)) {\n    if (fm.isFileStoredIniCloud(statePath) && !fm.isFileDownloaded(statePath)) {\n      console.log(\"State file in iCloud but not downloaded\");\n      await fm.downloadFileFromiCloud(statePath);\n    }\n    state = JSON.parse(fm.readString(statePath));\n  }\n\n  if (fm.isFileStoredIniCloud(configPath) && !fm.isFileDownloaded(configPath)) {\n    console.log(\"Config file in iCloud but not downloaded\");\n    await fm.downloadFileFromiCloud(configPath);\n  }\n  const configText = fm.readString(configPath);\n  var widgetConfig = JSON.parse(configText);\n\n  var vehicleIdx = 0;\n  if (args.widgetParameter != undefined) {\n    vehicleIdx = parseInt(args.widgetParameter) - 1;\n  }\n\n  if (vehicleIdx >= widgetConfig.count) {\n    await showErrorMessage(widget, \"There is no vehicle with index \" + args.widgetParameter);\n    return;\n  }\n\n  const refreshToken = widgetConfig.refreshToken;\n  const vehicleName = widgetConfig.vehicles[vehicleIdx].display_name;\n  const VIN = widgetConfig.vehicles[vehicleIdx].vin;\n  const TIMEZONE = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n  var vehicleState = state.hasOwnProperty(VIN)\n    ? state[VIN]\n    : {\n        safetyScore: 0,\n        lastChange: 0,\n        totalMilesDriven: 0,\n      };\n\n  const authResponse = await request(\"https:\/\/auth.tesla.com\/oauth2\/v3\/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application\/json\",\n      Accept: \"application\/json\",\n      \"User-Agent\": \"tesla\/widget\",\n    },\n    body: {\n      grant_type: \"refresh_token\",\n      client_id: \"ownerapi\",\n      scope: \"openid email offline_access\",\n      refresh_token: refreshToken,\n    },\n  });\n\n  if (authResponse == undefined) {\n    await showErrorMessage(widget, \"Communication\\nFailure\");\n    return;\n  }\n\n  if (authResponse.hasOwnProperty(\"error_description\")) {\n    await showErrorMessage(widget, authResponse.error_description);\n    return;\n  }\n\n  widgetConfig.refreshToken = refreshToken;\n  fm.writeString(configPath, JSON.stringify(widgetConfig));\n\n  const scoreResponse = await request(\n    \"https:\/\/akamai-apigateway-vfx.tesla.com\/safety-rating\/daily-metrics?deviceLanguage=en&deviceCountry=US&vin=\" + VIN + \"&timezone=\" + TIMEZONE,\n    {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + authResponse.access_token,\n        \"Content-Type\": \"application\/json\",\n        Accept: \"application\/json\",\n      },\n      body: undefined,\n    }\n  );\n\n  if (scoreResponse == undefined) {\n    await showErrorMessage(widget, \"Communication\\nFailure\");\n    return;\n  }\n\n  if (!scoreResponse.hasOwnProperty(\"rangeAggregation\")) {\n    if (scoreResponse.hasOwnProperty(\"message\")) {\n      await showErrorMessage(widget, scoreResponse.message);\n      return;\n    } else {\n      await showErrorMessage(widget, \"Communication\\nFailure\");\n      return;\n    }\n  }\n\n  var previousScore = vehicleState.safetyScore;\n  var previousTotalMilesDriven = vehicleState.totalMilesDriven;\n\n  vehicleState.safetyScore = scoreResponse.rangeAggregation.metrics.safetyScore;\n  \n  var change = 0;\n  var totalMilesDriven = 0;\n  for (var i = 0; i < scoreResponse.dailyAggregation.metrics.length; i++) {\n    var dayMetrics = scoreResponse.dailyAggregation.metrics[i];\n    totalMilesDriven += dayMetrics.milesDriven;\n  }\n\n  if (previousScore != vehicleState.safetyScore || previousTotalMilesDriven != totalMilesDriven) {\n    if (previousScore != vehicleState.safetyScore) {\n      change = vehicleState.safetyScore - previousScore;\n      vehicleState.lastChange = change;\n    }\n    vehicleState.totalMilesDriven = totalMilesDriven;\n\n    state[VIN] = vehicleState;\n    fm.writeString(statePath, JSON.stringify(state));\n  }\n\n  if (change == 0 && previousTotalMilesDriven == totalMilesDriven) {\n    change = vehicleState.lastChange;\n  }\n\n  if (previousScore != vehicleState.safetyScore) {\n    Notification.removeDelivered([\"safetyScore\"]);\n    Notification.removePending([\"safetyScore\"]);\n\n    const notification = new Notification();\n    const changeText = change > 0 ? \"increased\" : \"decreased\";\n    notification.body = \"Your safety score \" + changeText + \" by \" + Math.abs(vehicleState.safetyScore - previousScore).toString() + \" points\";\n    notification.identifier = \"safetyScore\";\n    notification.schedule();\n  }\n\n  var fontSizeAdjustment = 0;\n  var scoreFontSizeAdjustment = 0;\n  if (config.widgetFamily == \"large\") {\n      fontSizeAdjustment = 20;\n      scoreFontSizeAdjustment = 40;\n  }\n\n\n  let daysDriven = widget.addText(scoreResponse.dailyAggregation.metrics.length.toString() + \" days\");\n  daysDriven.centerAlignText();\n  daysDriven.textColor = Color.white();\n  daysDriven.shadowColor = Color.blue();\n  daysDriven.shadowOffset = new Point(2, 2);\n  daysDriven.shadowRadius = 4;\n  daysDriven.font = Font.blackRoundedSystemFont(14 + fontSizeAdjustment);\n\n  widget.addSpacer();\n\n  const scoreRow = widget.addStack();\n  scoreRow.bottomAlignContent();\n  scoreRow.layoutHorizontally();\n  scoreRow.addSpacer();\n\n  let text = scoreRow.addText(vehicleState.safetyScore.toString());\n  text.centerAlignText();\n  text.textColor = Color.white();\n  text.shadowColor = Color.blue();\n  text.shadowOffset = new Point(2, 2);\n  text.shadowRadius = 4;\n  text.font = Font.blackRoundedSystemFont(56 + scoreFontSizeAdjustment);\n\n  if (change != 0) {\n    const deviationStack = scoreRow.addStack();\n    deviationStack.layoutVertically();\n    deviationStack.topAlignContent();\n    deviationStack.spacing = -5;\n\n    const arrow = deviationStack.addText(change > 0 ? \"↑\" : \"↓\");\n    arrow.textColor = change > 0 ? Color.green() : Color.red();\n    arrow.font = Font.mediumMonospacedSystemFont(12 + fontSizeAdjustment);\n    const sign = change > 0 ? \"+\" : \"-\";\n    const diff = deviationStack.addText(sign + Math.abs(change).toString());\n    diff.textColor = change > 0 ? Color.green() : Color.red();\n    diff.font = Font.mediumMonospacedSystemFont(12 + fontSizeAdjustment);\n  }\n\n  scoreRow.addSpacer();\n\n  widget.addSpacer();\n\n  let milesDriven = widget.addText(scoreResponse.rangeAggregation.metrics.milesDriven.toString() + \" mi\");\n  milesDriven.centerAlignText();\n  milesDriven.textColor = Color.white();\n  milesDriven.shadowColor = Color.blue();\n  milesDriven.shadowOffset = new Point(2, 2);\n  milesDriven.shadowRadius = 4;\n  milesDriven.font = Font.blackRoundedSystemFont(16 + fontSizeAdjustment);\n\n  let textVehicleName = widget.addText(vehicleName);\n  textVehicleName.centerAlignText();\n  textVehicleName.textColor = Color.white();\n  textVehicleName.shadowColor = Color.blue();\n  textVehicleName.shadowOffset = new Point(2, 2);\n  textVehicleName.shadowRadius = 4;\n  textVehicleName.font = Font.blackRoundedSystemFont(20 + fontSizeAdjustment);\n\n  widget.setPadding(12, 12, 12, 12);\n\n  if (!widgetConfig.runsInWidget) {\n    widget.presentSmall();\n  }\n\n  Script.setWidget(widget);\n  Script.complete();\n  }\n\n  await run();\n",
  "share_sheet_inputs" : [

  ]
}