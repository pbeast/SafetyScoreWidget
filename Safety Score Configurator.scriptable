{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "light-gray",
    "glyph" : "cogs"
  },
  "name" : "Safety Score Configurator",
  "script" : "\nasync function showErrorMessage(widget, message) {\n  let msg = widget.addText(message);\n\n  msg.textColor = Color.red();\n  msg.centerAlignText();\n  msg.font = Font.heavyMonospacedSystemFont(13);\n\n  Script.setWidget(widget);\n  Script.complete();\n}\n\nfunction presentAlert(message) {\n  const alert = new Alert();\n  alert.message = message;\n  alert.addAction(\"OK\");\n  return alert.presentAlert();\n}\n\nasync function buildConfig(refreshToken) {\n  const TESLA_CLIENT_ID = \"81527cff06843c8634fdc09e8ac0abefb46ac849f38fe1e431c2ef2106796384\";\n  const TESLA_CLIENT_SECRET = \"c7257eb71a564034f9419ee651c7d0e5f7aa6bfbd18bafb5c5c033b093bb2fa3\";\n\n  const authResponse = await request(\"https:\/\/auth.tesla.com\/oauth2\/v3\/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application\/json\",\n      Accept: \"application\/json\",\n      \"User-Agent\": \"tesla\/widget\",\n    },\n    body: {\n      grant_type: \"refresh_token\",\n      client_id: \"ownerapi\",\n      scope: \"openid email offline_access\",\n      refresh_token: refreshToken,\n    },\n  });\n\n  const tokenResponse = await request(\"https:\/\/owner-api.teslamotors.com\/oauth\/token\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application\/json\",\n      Accept: \"application\/json\",\n      Authorization: \"Bearer \" + authResponse.access_token,\n    },\n    body: {\n      grant_type: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\n      client_id: TESLA_CLIENT_ID,\n      client_secret: TESLA_CLIENT_SECRET,\n    },\n  });\n\n  const vehiclesData = await request(\"https:\/\/owner-api.teslamotors.com\/api\/1\/vehicles\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application\/json\",\n      Accept: \"application\/json\",\n      Authorization: \"Bearer \" + tokenResponse.access_token,\n    },\n    body: undefined,\n  });\n\n  if (vehiclesData.count < 1) {\n    throw new Error(\"No vehicles registered on this account\");\n  } else {\n    var vehicles = [];\n    for (let vehicle of vehiclesData.response) {\n      vehicles.push({\n        display_name: vehicle.display_name,\n        vin: vehicle.vin,\n      });\n    }\n    return await Promise.resolve({\n      refreshToken: refreshToken,\n      count: vehiclesData.count,\n      vehicles: vehicles,\n    });\n  }\n}\n\nasync function request(url, opts) {\n  try {\n    const request = new Request(url);\n\n    request.method = opts.method;\n    request.headers = opts.headers;\n    if (opts.body != undefined) request.body = JSON.stringify(opts.body);\n\n    var result = await request.loadJSON();\n\n    return result;\n  } catch (err) {\n    console.log(err);\n\n    return undefined;\n  }\n}\n\nasync function run() {\n  let widget = new ListWidget();\n  widget.backgroundColor = Color.white();\n\n  const fm = FileManager.iCloud();\n  const configPath = fm.documentsDirectory() + \"\/safetyScoreConfig.json\";\n\n  if (!config.runsInWidget) {\n    widget.presentMedium();\n    const alert = new Alert();\n    alert.message = \"Refresh Token\";\n    alert.addTextField(\"Refresh Token\", \"\");\n    alert.addAction(\"OK\");\n    alert.addCancelAction(\"Cancel\");\n    alert.presentAlert().then(\n      (idx) => {\n        if (idx == -1) {\n          showErrorMessage(widget, \"Canceled\\nPlease run again\");\n        } else {\n          const refreshToken = alert.textFieldValue(0);\n          buildConfig(refreshToken)\n            .then((configJSON) => {\n              fm.writeString(configPath, JSON.stringify(configJSON));\n              presentAlert(\"Widget configured\");\n            })\n            .catch((err) => {\n              presentAlert(err);\n            });\n        }\n      },\n      function () {\n        showErrorMessage(widget, \"Canceled\\nPlease run again\");\n      }\n    );\n  } else {\n    await showErrorMessage(widget, \"Please run\\nin the app\");\n  }\n}\n\nawait run();",
  "share_sheet_inputs" : [

  ]
}